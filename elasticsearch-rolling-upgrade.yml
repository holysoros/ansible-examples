# Ansible
# Rolling Upgrade of Elasticsearch
# author: Jeff Steinmetz, @jeffsteinmetz; Bin Li, @holysoros
# tested with Ansible 2.4

---
- name: Elasticsearch rolling upgrade
  hosts: apm
  serial: 1

  vars:
    es_disable_allocation:  '{ "persistent": { "cluster.routing.allocation.enable": "none" } }'
    es_enable_allocation: '{ "persistent": { "cluster.routing.allocation.enable": null } }'
    es_http_port: 9200
    es_transport_port: 9300
    # desired version to upgrade to:
    es_version: 6.5.0

  tasks:
      # this first step is a overkill, but here
      # in case the upgrade was cancelled by user mid playbook run
    - name: make sure elasticsearch service is running
      service: name=elasticsearch enabled=yes state=started
      register: response
      become: true

    - name: Wait for elasticsearch node to come back up if it was stopped
      wait_for: port={{ es_transport_port }} delay=45
      when: response.changed == true

    - name: check current version
      uri: url=http://localhost:{{ es_http_port }} method=GET
      register: version_found
      retries: 10
      delay: 10

    - name: Display Current Elasticsearch Version
      debug: var=version_found.json.version.number

      # this step is key!!!  Don't restart more nodes
      # until all shards have completed recovery
    - name: Wait for cluster health to return to green
      uri: url=http://localhost:{{ es_http_port }}/_cluster/health method=GET
      register: response
      until: "response.json.status == 'green'"
      retries: 50
      delay: 30
      when: version_found.json.version.number !=  es_version

    - name: Disable shard allocation for the cluster
      uri: url=http://localhost:{{ es_http_port }}/_cluster/settings method=PUT body='{{ es_disable_allocation }}' body_format=json
      when: version_found.json.version.number != es_version

    - name: Shutdown elasticsearch service
      service: name=elasticsearch enabled=yes state=stopped
      become: true

    - name: Update elasticsearch
      apt: deb=/home/deployer/elasticsearch-{{ es_version }}.deb
      when: version_found.json.version.number != es_version
      become: true

    - name: Start elasticsearch
      service: name=elasticsearch enabled=yes state=started
      when: version_found.json.version.number != es_version
      become: true

    - name: Wait for elasticsearch node to come back up
      wait_for: port={{ es_transport_port }} delay=35
      when: version_found.json.version.number != es_version

    - name: Confirm the node joins the cluster
      shell: "curl -s -m 2 'localhost:9200/_cat/nodes?h=name' | grep -E '^{{ansible_hostname}}$'"
      register: result
      until: result.rc == 0
      retries: 200
      delay: 3
      when: version_found.json.version.number != es_version

    - name: Enable shard allocation for the cluster
      uri: url=http://localhost:{{ es_http_port }}/_cluster/settings method=PUT body='{{ es_enable_allocation }}' body_format=json
      register: response
      # next line is boolean not string, so no quotes around true
      # use python truthiness
      until: "response.json.acknowledged == true"
      retries: 5
      delay: 30
      when: version_found.json.version.number != es_version

    - name: Wait for cluster health to return to yellow or green
      uri: url=http://localhost:{{ es_http_port }}/_cluster/health method=GET
      register: response
      until: "response.json.status == 'yellow' or response.json.status == 'green'"
      retries: 5
      delay: 30
      when: version_found.json.version.number != es_version

